// source: Broadcast.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var User_pb = require('./User_pb.js');
goog.object.extend(proto, User_pb);
goog.exportSymbol('proto.pq.streaming.games.timer.Connection', null, global);
goog.exportSymbol('proto.pq.streaming.games.timer.Countdown', null, global);
goog.exportSymbol('proto.pq.streaming.games.timer.DisconnectResponse', null, global);
goog.exportSymbol('proto.pq.streaming.games.timer.EndGame', null, global);
goog.exportSymbol('proto.pq.streaming.games.timer.HeartbeatResponse', null, global);
goog.exportSymbol('proto.pq.streaming.games.timer.Message', null, global);
goog.exportSymbol('proto.pq.streaming.games.timer.OptionKey', null, global);
goog.exportSymbol('proto.pq.streaming.games.timer.PlayerListResponse', null, global);
goog.exportSymbol('proto.pq.streaming.games.timer.PlayerlistRequest', null, global);
goog.exportSymbol('proto.pq.streaming.games.timer.Question', null, global);
goog.exportSymbol('proto.pq.streaming.games.timer.QuestionOption', null, global);
goog.exportSymbol('proto.pq.streaming.games.timer.StartQuestion', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pq.streaming.games.timer.Countdown = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pq.streaming.games.timer.Countdown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pq.streaming.games.timer.Countdown.displayName = 'proto.pq.streaming.games.timer.Countdown';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pq.streaming.games.timer.Connection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pq.streaming.games.timer.Connection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pq.streaming.games.timer.Connection.displayName = 'proto.pq.streaming.games.timer.Connection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pq.streaming.games.timer.QuestionOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pq.streaming.games.timer.QuestionOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pq.streaming.games.timer.QuestionOption.displayName = 'proto.pq.streaming.games.timer.QuestionOption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pq.streaming.games.timer.Question = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pq.streaming.games.timer.Question.repeatedFields_, null);
};
goog.inherits(proto.pq.streaming.games.timer.Question, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pq.streaming.games.timer.Question.displayName = 'proto.pq.streaming.games.timer.Question';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pq.streaming.games.timer.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pq.streaming.games.timer.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pq.streaming.games.timer.Message.displayName = 'proto.pq.streaming.games.timer.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pq.streaming.games.timer.StartQuestion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pq.streaming.games.timer.StartQuestion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pq.streaming.games.timer.StartQuestion.displayName = 'proto.pq.streaming.games.timer.StartQuestion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pq.streaming.games.timer.EndGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pq.streaming.games.timer.EndGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pq.streaming.games.timer.EndGame.displayName = 'proto.pq.streaming.games.timer.EndGame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pq.streaming.games.timer.DisconnectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pq.streaming.games.timer.DisconnectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pq.streaming.games.timer.DisconnectResponse.displayName = 'proto.pq.streaming.games.timer.DisconnectResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pq.streaming.games.timer.HeartbeatResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pq.streaming.games.timer.HeartbeatResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pq.streaming.games.timer.HeartbeatResponse.displayName = 'proto.pq.streaming.games.timer.HeartbeatResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pq.streaming.games.timer.PlayerlistRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pq.streaming.games.timer.PlayerlistRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pq.streaming.games.timer.PlayerlistRequest.displayName = 'proto.pq.streaming.games.timer.PlayerlistRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pq.streaming.games.timer.PlayerListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pq.streaming.games.timer.PlayerListResponse.repeatedFields_, null);
};
goog.inherits(proto.pq.streaming.games.timer.PlayerListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pq.streaming.games.timer.PlayerListResponse.displayName = 'proto.pq.streaming.games.timer.PlayerListResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pq.streaming.games.timer.Countdown.prototype.toObject = function(opt_includeInstance) {
  return proto.pq.streaming.games.timer.Countdown.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pq.streaming.games.timer.Countdown} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.Countdown.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pq.streaming.games.timer.Countdown}
 */
proto.pq.streaming.games.timer.Countdown.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pq.streaming.games.timer.Countdown;
  return proto.pq.streaming.games.timer.Countdown.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pq.streaming.games.timer.Countdown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pq.streaming.games.timer.Countdown}
 */
proto.pq.streaming.games.timer.Countdown.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pq.streaming.games.timer.Countdown.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pq.streaming.games.timer.Countdown.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pq.streaming.games.timer.Countdown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.Countdown.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 time = 1;
 * @return {number}
 */
proto.pq.streaming.games.timer.Countdown.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pq.streaming.games.timer.Countdown} returns this
 */
proto.pq.streaming.games.timer.Countdown.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pq.streaming.games.timer.Connection.prototype.toObject = function(opt_includeInstance) {
  return proto.pq.streaming.games.timer.Connection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pq.streaming.games.timer.Connection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.Connection.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    user: (f = msg.getUser()) && User_pb.User.toObject(includeInstance, f),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pq.streaming.games.timer.Connection}
 */
proto.pq.streaming.games.timer.Connection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pq.streaming.games.timer.Connection;
  return proto.pq.streaming.games.timer.Connection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pq.streaming.games.timer.Connection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pq.streaming.games.timer.Connection}
 */
proto.pq.streaming.games.timer.Connection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = new User_pb.User;
      reader.readMessage(value,User_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pq.streaming.games.timer.Connection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pq.streaming.games.timer.Connection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pq.streaming.games.timer.Connection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.Connection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      User_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.pq.streaming.games.timer.Connection.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pq.streaming.games.timer.Connection} returns this
 */
proto.pq.streaming.games.timer.Connection.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional pq.user.User user = 2;
 * @return {?proto.pq.user.User}
 */
proto.pq.streaming.games.timer.Connection.prototype.getUser = function() {
  return /** @type{?proto.pq.user.User} */ (
    jspb.Message.getWrapperField(this, User_pb.User, 2));
};


/**
 * @param {?proto.pq.user.User|undefined} value
 * @return {!proto.pq.streaming.games.timer.Connection} returns this
*/
proto.pq.streaming.games.timer.Connection.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pq.streaming.games.timer.Connection} returns this
 */
proto.pq.streaming.games.timer.Connection.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pq.streaming.games.timer.Connection.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool active = 3;
 * @return {boolean}
 */
proto.pq.streaming.games.timer.Connection.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pq.streaming.games.timer.Connection} returns this
 */
proto.pq.streaming.games.timer.Connection.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pq.streaming.games.timer.QuestionOption.prototype.toObject = function(opt_includeInstance) {
  return proto.pq.streaming.games.timer.QuestionOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pq.streaming.games.timer.QuestionOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.QuestionOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, 0),
    title: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pq.streaming.games.timer.QuestionOption}
 */
proto.pq.streaming.games.timer.QuestionOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pq.streaming.games.timer.QuestionOption;
  return proto.pq.streaming.games.timer.QuestionOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pq.streaming.games.timer.QuestionOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pq.streaming.games.timer.QuestionOption}
 */
proto.pq.streaming.games.timer.QuestionOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pq.streaming.games.timer.OptionKey} */ (reader.readEnum());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pq.streaming.games.timer.QuestionOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pq.streaming.games.timer.QuestionOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pq.streaming.games.timer.QuestionOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.QuestionOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional OptionKey key = 1;
 * @return {!proto.pq.streaming.games.timer.OptionKey}
 */
proto.pq.streaming.games.timer.QuestionOption.prototype.getKey = function() {
  return /** @type {!proto.pq.streaming.games.timer.OptionKey} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pq.streaming.games.timer.OptionKey} value
 * @return {!proto.pq.streaming.games.timer.QuestionOption} returns this
 */
proto.pq.streaming.games.timer.QuestionOption.prototype.setKey = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.pq.streaming.games.timer.QuestionOption.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pq.streaming.games.timer.QuestionOption} returns this
 */
proto.pq.streaming.games.timer.QuestionOption.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pq.streaming.games.timer.Question.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pq.streaming.games.timer.Question.prototype.toObject = function(opt_includeInstance) {
  return proto.pq.streaming.games.timer.Question.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pq.streaming.games.timer.Question} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.Question.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    q: jspb.Message.getFieldWithDefault(msg, 2, ""),
    optionsList: jspb.Message.toObjectList(msg.getOptionsList(),
    proto.pq.streaming.games.timer.QuestionOption.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pq.streaming.games.timer.Question}
 */
proto.pq.streaming.games.timer.Question.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pq.streaming.games.timer.Question;
  return proto.pq.streaming.games.timer.Question.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pq.streaming.games.timer.Question} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pq.streaming.games.timer.Question}
 */
proto.pq.streaming.games.timer.Question.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQ(value);
      break;
    case 4:
      var value = new proto.pq.streaming.games.timer.QuestionOption;
      reader.readMessage(value,proto.pq.streaming.games.timer.QuestionOption.deserializeBinaryFromReader);
      msg.addOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pq.streaming.games.timer.Question.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pq.streaming.games.timer.Question.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pq.streaming.games.timer.Question} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.Question.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getQ();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.pq.streaming.games.timer.QuestionOption.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.pq.streaming.games.timer.Question.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pq.streaming.games.timer.Question} returns this
 */
proto.pq.streaming.games.timer.Question.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string q = 2;
 * @return {string}
 */
proto.pq.streaming.games.timer.Question.prototype.getQ = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pq.streaming.games.timer.Question} returns this
 */
proto.pq.streaming.games.timer.Question.prototype.setQ = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated QuestionOption options = 4;
 * @return {!Array<!proto.pq.streaming.games.timer.QuestionOption>}
 */
proto.pq.streaming.games.timer.Question.prototype.getOptionsList = function() {
  return /** @type{!Array<!proto.pq.streaming.games.timer.QuestionOption>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pq.streaming.games.timer.QuestionOption, 4));
};


/**
 * @param {!Array<!proto.pq.streaming.games.timer.QuestionOption>} value
 * @return {!proto.pq.streaming.games.timer.Question} returns this
*/
proto.pq.streaming.games.timer.Question.prototype.setOptionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.pq.streaming.games.timer.QuestionOption=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pq.streaming.games.timer.QuestionOption}
 */
proto.pq.streaming.games.timer.Question.prototype.addOptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.pq.streaming.games.timer.QuestionOption, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pq.streaming.games.timer.Question} returns this
 */
proto.pq.streaming.games.timer.Question.prototype.clearOptionsList = function() {
  return this.setOptionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pq.streaming.games.timer.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.pq.streaming.games.timer.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pq.streaming.games.timer.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0),
    question: (f = msg.getQuestion()) && proto.pq.streaming.games.timer.Question.toObject(includeInstance, f),
    newplayer: (f = msg.getNewplayer()) && User_pb.User.toObject(includeInstance, f),
    removedplayer: (f = msg.getRemovedplayer()) && User_pb.User.toObject(includeInstance, f),
    end: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pq.streaming.games.timer.Message}
 */
proto.pq.streaming.games.timer.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pq.streaming.games.timer.Message;
  return proto.pq.streaming.games.timer.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pq.streaming.games.timer.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pq.streaming.games.timer.Message}
 */
proto.pq.streaming.games.timer.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 2:
      var value = new proto.pq.streaming.games.timer.Question;
      reader.readMessage(value,proto.pq.streaming.games.timer.Question.deserializeBinaryFromReader);
      msg.setQuestion(value);
      break;
    case 3:
      var value = new User_pb.User;
      reader.readMessage(value,User_pb.User.deserializeBinaryFromReader);
      msg.setNewplayer(value);
      break;
    case 4:
      var value = new User_pb.User;
      reader.readMessage(value,User_pb.User.deserializeBinaryFromReader);
      msg.setRemovedplayer(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pq.streaming.games.timer.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pq.streaming.games.timer.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pq.streaming.games.timer.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getQuestion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pq.streaming.games.timer.Question.serializeBinaryToWriter
    );
  }
  f = message.getNewplayer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      User_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getRemovedplayer();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      User_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional int64 Time = 1;
 * @return {number}
 */
proto.pq.streaming.games.timer.Message.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pq.streaming.games.timer.Message} returns this
 */
proto.pq.streaming.games.timer.Message.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Question Question = 2;
 * @return {?proto.pq.streaming.games.timer.Question}
 */
proto.pq.streaming.games.timer.Message.prototype.getQuestion = function() {
  return /** @type{?proto.pq.streaming.games.timer.Question} */ (
    jspb.Message.getWrapperField(this, proto.pq.streaming.games.timer.Question, 2));
};


/**
 * @param {?proto.pq.streaming.games.timer.Question|undefined} value
 * @return {!proto.pq.streaming.games.timer.Message} returns this
*/
proto.pq.streaming.games.timer.Message.prototype.setQuestion = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pq.streaming.games.timer.Message} returns this
 */
proto.pq.streaming.games.timer.Message.prototype.clearQuestion = function() {
  return this.setQuestion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pq.streaming.games.timer.Message.prototype.hasQuestion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional pq.user.User NewPlayer = 3;
 * @return {?proto.pq.user.User}
 */
proto.pq.streaming.games.timer.Message.prototype.getNewplayer = function() {
  return /** @type{?proto.pq.user.User} */ (
    jspb.Message.getWrapperField(this, User_pb.User, 3));
};


/**
 * @param {?proto.pq.user.User|undefined} value
 * @return {!proto.pq.streaming.games.timer.Message} returns this
*/
proto.pq.streaming.games.timer.Message.prototype.setNewplayer = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pq.streaming.games.timer.Message} returns this
 */
proto.pq.streaming.games.timer.Message.prototype.clearNewplayer = function() {
  return this.setNewplayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pq.streaming.games.timer.Message.prototype.hasNewplayer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional pq.user.User RemovedPlayer = 4;
 * @return {?proto.pq.user.User}
 */
proto.pq.streaming.games.timer.Message.prototype.getRemovedplayer = function() {
  return /** @type{?proto.pq.user.User} */ (
    jspb.Message.getWrapperField(this, User_pb.User, 4));
};


/**
 * @param {?proto.pq.user.User|undefined} value
 * @return {!proto.pq.streaming.games.timer.Message} returns this
*/
proto.pq.streaming.games.timer.Message.prototype.setRemovedplayer = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pq.streaming.games.timer.Message} returns this
 */
proto.pq.streaming.games.timer.Message.prototype.clearRemovedplayer = function() {
  return this.setRemovedplayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pq.streaming.games.timer.Message.prototype.hasRemovedplayer = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool End = 5;
 * @return {boolean}
 */
proto.pq.streaming.games.timer.Message.prototype.getEnd = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pq.streaming.games.timer.Message} returns this
 */
proto.pq.streaming.games.timer.Message.prototype.setEnd = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pq.streaming.games.timer.StartQuestion.prototype.toObject = function(opt_includeInstance) {
  return proto.pq.streaming.games.timer.StartQuestion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pq.streaming.games.timer.StartQuestion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.StartQuestion.toObject = function(includeInstance, msg) {
  var f, obj = {
    question: (f = msg.getQuestion()) && proto.pq.streaming.games.timer.Question.toObject(includeInstance, f),
    isHost: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    gameId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pq.streaming.games.timer.StartQuestion}
 */
proto.pq.streaming.games.timer.StartQuestion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pq.streaming.games.timer.StartQuestion;
  return proto.pq.streaming.games.timer.StartQuestion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pq.streaming.games.timer.StartQuestion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pq.streaming.games.timer.StartQuestion}
 */
proto.pq.streaming.games.timer.StartQuestion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pq.streaming.games.timer.Question;
      reader.readMessage(value,proto.pq.streaming.games.timer.Question.deserializeBinaryFromReader);
      msg.setQuestion(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsHost(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pq.streaming.games.timer.StartQuestion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pq.streaming.games.timer.StartQuestion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pq.streaming.games.timer.StartQuestion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.StartQuestion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pq.streaming.games.timer.Question.serializeBinaryToWriter
    );
  }
  f = message.getIsHost();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Question question = 1;
 * @return {?proto.pq.streaming.games.timer.Question}
 */
proto.pq.streaming.games.timer.StartQuestion.prototype.getQuestion = function() {
  return /** @type{?proto.pq.streaming.games.timer.Question} */ (
    jspb.Message.getWrapperField(this, proto.pq.streaming.games.timer.Question, 1));
};


/**
 * @param {?proto.pq.streaming.games.timer.Question|undefined} value
 * @return {!proto.pq.streaming.games.timer.StartQuestion} returns this
*/
proto.pq.streaming.games.timer.StartQuestion.prototype.setQuestion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pq.streaming.games.timer.StartQuestion} returns this
 */
proto.pq.streaming.games.timer.StartQuestion.prototype.clearQuestion = function() {
  return this.setQuestion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pq.streaming.games.timer.StartQuestion.prototype.hasQuestion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_host = 2;
 * @return {boolean}
 */
proto.pq.streaming.games.timer.StartQuestion.prototype.getIsHost = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pq.streaming.games.timer.StartQuestion} returns this
 */
proto.pq.streaming.games.timer.StartQuestion.prototype.setIsHost = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string game_id = 3;
 * @return {string}
 */
proto.pq.streaming.games.timer.StartQuestion.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pq.streaming.games.timer.StartQuestion} returns this
 */
proto.pq.streaming.games.timer.StartQuestion.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pq.streaming.games.timer.EndGame.prototype.toObject = function(opt_includeInstance) {
  return proto.pq.streaming.games.timer.EndGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pq.streaming.games.timer.EndGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.EndGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pq.streaming.games.timer.EndGame}
 */
proto.pq.streaming.games.timer.EndGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pq.streaming.games.timer.EndGame;
  return proto.pq.streaming.games.timer.EndGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pq.streaming.games.timer.EndGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pq.streaming.games.timer.EndGame}
 */
proto.pq.streaming.games.timer.EndGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pq.streaming.games.timer.EndGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pq.streaming.games.timer.EndGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pq.streaming.games.timer.EndGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.EndGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string game_id = 3;
 * @return {string}
 */
proto.pq.streaming.games.timer.EndGame.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pq.streaming.games.timer.EndGame} returns this
 */
proto.pq.streaming.games.timer.EndGame.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pq.streaming.games.timer.DisconnectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pq.streaming.games.timer.DisconnectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pq.streaming.games.timer.DisconnectResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.DisconnectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pq.streaming.games.timer.DisconnectResponse}
 */
proto.pq.streaming.games.timer.DisconnectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pq.streaming.games.timer.DisconnectResponse;
  return proto.pq.streaming.games.timer.DisconnectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pq.streaming.games.timer.DisconnectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pq.streaming.games.timer.DisconnectResponse}
 */
proto.pq.streaming.games.timer.DisconnectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pq.streaming.games.timer.DisconnectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pq.streaming.games.timer.DisconnectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pq.streaming.games.timer.DisconnectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.DisconnectResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pq.streaming.games.timer.HeartbeatResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pq.streaming.games.timer.HeartbeatResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pq.streaming.games.timer.HeartbeatResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.HeartbeatResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pq.streaming.games.timer.HeartbeatResponse}
 */
proto.pq.streaming.games.timer.HeartbeatResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pq.streaming.games.timer.HeartbeatResponse;
  return proto.pq.streaming.games.timer.HeartbeatResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pq.streaming.games.timer.HeartbeatResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pq.streaming.games.timer.HeartbeatResponse}
 */
proto.pq.streaming.games.timer.HeartbeatResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pq.streaming.games.timer.HeartbeatResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pq.streaming.games.timer.HeartbeatResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pq.streaming.games.timer.HeartbeatResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.HeartbeatResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pq.streaming.games.timer.PlayerlistRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pq.streaming.games.timer.PlayerlistRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pq.streaming.games.timer.PlayerlistRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.PlayerlistRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pq.streaming.games.timer.PlayerlistRequest}
 */
proto.pq.streaming.games.timer.PlayerlistRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pq.streaming.games.timer.PlayerlistRequest;
  return proto.pq.streaming.games.timer.PlayerlistRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pq.streaming.games.timer.PlayerlistRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pq.streaming.games.timer.PlayerlistRequest}
 */
proto.pq.streaming.games.timer.PlayerlistRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pq.streaming.games.timer.PlayerlistRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pq.streaming.games.timer.PlayerlistRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pq.streaming.games.timer.PlayerlistRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.PlayerlistRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.pq.streaming.games.timer.PlayerlistRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pq.streaming.games.timer.PlayerlistRequest} returns this
 */
proto.pq.streaming.games.timer.PlayerlistRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pq.streaming.games.timer.PlayerListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pq.streaming.games.timer.PlayerListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pq.streaming.games.timer.PlayerListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pq.streaming.games.timer.PlayerListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.PlayerListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    User_pb.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pq.streaming.games.timer.PlayerListResponse}
 */
proto.pq.streaming.games.timer.PlayerListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pq.streaming.games.timer.PlayerListResponse;
  return proto.pq.streaming.games.timer.PlayerListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pq.streaming.games.timer.PlayerListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pq.streaming.games.timer.PlayerListResponse}
 */
proto.pq.streaming.games.timer.PlayerListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new User_pb.User;
      reader.readMessage(value,User_pb.User.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pq.streaming.games.timer.PlayerListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pq.streaming.games.timer.PlayerListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pq.streaming.games.timer.PlayerListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pq.streaming.games.timer.PlayerListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      User_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * repeated pq.user.User players = 1;
 * @return {!Array<!proto.pq.user.User>}
 */
proto.pq.streaming.games.timer.PlayerListResponse.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.pq.user.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, User_pb.User, 1));
};


/**
 * @param {!Array<!proto.pq.user.User>} value
 * @return {!proto.pq.streaming.games.timer.PlayerListResponse} returns this
*/
proto.pq.streaming.games.timer.PlayerListResponse.prototype.setPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pq.user.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pq.user.User}
 */
proto.pq.streaming.games.timer.PlayerListResponse.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pq.user.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pq.streaming.games.timer.PlayerListResponse} returns this
 */
proto.pq.streaming.games.timer.PlayerListResponse.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};


/**
 * @enum {number}
 */
proto.pq.streaming.games.timer.OptionKey = {
  A: 0,
  B: 1,
  C: 2,
  D: 3
};

goog.object.extend(exports, proto.pq.streaming.games.timer);
